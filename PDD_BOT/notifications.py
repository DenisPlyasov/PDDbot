from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import datetime

# --- –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def start_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –∫–ª—é—á –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –æ —Ç–æ–º, "
        "—á—Ç–æ –Ω–∞–¥–æ –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n"
        "–ì–ª–∞–≤–Ω–æ–µ - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∏ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö ‚Äî "
        "–æ–±–µ—â–∞–µ–º, –Ω–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã –º—ã –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ–º üôÇ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å", callback_data="remind_choose_day")],
            [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="remind_disable")],
            [InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="to_menu")]
        ])
    )

# --- –≤—ã–±–æ—Ä –¥–Ω–µ–π ---
async def choose_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if "remind_days" not in context.user_data:
        context.user_data["remind_days"] = set()

    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard = []

    for d in days:
        mark = "‚úÖ" if d in context.user_data["remind_days"] else ""
        keyboard.append([InlineKeyboardButton(f"{d} {mark}", callback_data=f"toggle_day_{d}")])

    keyboard.append([InlineKeyboardButton("‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data="remind_choose_time")])
    keyboard.append([InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="to_menu")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–Ω—è ---
async def toggle_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    day = query.data.replace("toggle_day_", "")

    if "remind_days" not in context.user_data:
        context.user_data["remind_days"] = set()

    if day in context.user_data["remind_days"]:
        context.user_data["remind_days"].remove(day)
    else:
        context.user_data["remind_days"].add(day)

    await choose_days(update, context)

# --- –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ---
async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    times = [f"{h:02d}:00" for h in range(10, 23)]
    keyboard = []

    for t in times:
        keyboard.append([InlineKeyboardButton(t, callback_data=f"set_time_{t}")])

    keyboard.append([InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="to_menu")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    time_str = query.data.replace("set_time_", "")
    context.user_data["remind_time"] = time_str

    days = ", ".join(context.user_data.get("remind_days", []))
    text = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–Ω–∏: {days}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_str}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
    )

    await query.message.edit_text(text)

    # –ø–µ—Ä–µ–¥–∞—ë–º –∏ chat_id, –∏ context
    await schedule_notifications(update.effective_chat.id, context)

# --- –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á ---
async def schedule_notifications(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    days = context.user_data.get("remind_days", [])
    time_str = context.user_data.get("remind_time")
    job_queue = getattr(context.application, "job_queue", None)

    if not days or not time_str or not job_queue:
        return

    # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    for job in job_queue.get_jobs_by_name(f"reminder_{chat_id}"):
        job.schedule_removal()

    hour, minute = map(int, time_str.split(":"))
    day_map = {"–ü–Ω": 0, "–í—Ç": 1, "–°—Ä": 2, "–ß—Ç": 3, "–ü—Ç": 4, "–°–±": 5, "–í—Å": 6}

    for day in days:
        job_queue.run_daily(
            send_reminder,
            time=datetime.time(hour, minute),
            days=(day_map[day],),
            chat_id=chat_id,
            name=f"reminder_{chat_id}"
        )

# --- –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def disable_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    job_queue = getattr(context.application, "job_queue", None)

    if job_queue:
        jobs = job_queue.get_jobs_by_name(f"reminder_{chat_id}")
        for job in jobs:
            job.schedule_removal()

    # —á–∏—Å—Ç–∏–º user_data
    context.user_data.pop("remind_days", None)
    context.user_data.pop("remind_time", None)

    await query.message.edit_text(
        "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    )

# --- –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        context.job.chat_id,
        "üìñ –ü–æ—Ä–∞ –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É –ü–î–î! –í–ø–µ—Ä—ë–¥ –∫ –∑–Ω–∞–Ω–∏—è–º!"
    )