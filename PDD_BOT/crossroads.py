from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes
import os
import random


main_rules = [
    {
        "name": "üî∏ 1. –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è",
        "description": f"–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫: –ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫ ‚Äî –º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, –ø—Ä–∏–º—ã–∫–∞–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è –¥–æ—Ä–æ–≥ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ, –Ω–µ —Å—á–∏—Ç–∞—è –≤—ã–µ–∑–¥–æ–≤ —Å –ø—Ä–∏–ª–µ–≥–∞—é—â–∏—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π.\n –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:\n –ü—Ä–∏ –ø—Ä–æ–µ–∑–¥–µ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω —É—Å—Ç—É–ø–∏—Ç—å –¥–æ—Ä–æ–≥—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ ‚Äî –ø–æ –∑–Ω–∞–∫–∞–º, —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞–º –∏–ª–∏ –æ–±—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º.",
    },
    {
        "name": "üî∏ 2. –¢–∏–ø—ã –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤",
        "description": f"‚Ä¢	–†–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–º –∏–ª–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–æ–º.\n‚Ä¢	–ù–µ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ ‚Äî –Ω–µ—Ç –Ω–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞, –Ω–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞, –ø—Ä–æ–µ–∑–¥ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É.",
    },
    {
        "name": "üî∏ 3. –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∑–¥–∞ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã—Ö –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤",
        "description": f"	‚Ä¢	–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏—è–º —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞.\n ‚Ä¢	–ü—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ –Ω–∞–ª–µ–≤–æ —É—Å—Ç—É–ø–∏ –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É.\n‚Ä¢	–ü—Ä–∏ —Ä–∞–∑—Ä–µ—à–∞—é—â–µ–º —Å–∏–≥–Ω–∞–ª–µ –∑–∞–≤–µ—Ä—à–∞–π –º–∞–Ω—ë–≤—Ä –¥–∞–∂–µ –Ω–∞ –º–∏–≥–∞—é—â–∏–π –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π.",
    },
    {
        "name": "üî∏ 4. –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∑–¥–∞ –Ω–µ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã—Ö –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤",
        "description": f"‚Ä¢	–ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞–∫ ‚Äú–ì–ª–∞–≤–Ω–∞—è –¥–æ—Ä–æ–≥–∞‚Äù ‚Äî –µ–¥—å –ø–µ—Ä–≤—ã–º.\n ‚Ä¢	–ï—Å–ª–∏ —Ç—ã –Ω–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π ‚Äî —É—Å—Ç—É–ø–∏ –≤—Å–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–π.\n ‚Ä¢	–ï—Å–ª–∏ –≤—Å–µ –Ω–∞ —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –¥–æ—Ä–æ–≥–∞—Ö ‚Äî —É—Å—Ç—É–ø–∏ —Ç–æ–º—É, –∫—Ç–æ —Å–ø—Ä–∞–≤–∞ (–ø—Ä–∞–≤–∏–ª–æ ‚Äú–ø–æ–º–µ—Ö–∏ —Å–ø—Ä–∞–≤–∞‚Äù).\n ‚Ä¢	–ü—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ –Ω–∞–ª–µ–≤–æ ‚Äî —É—Å—Ç—É–ø–∏ –≤—Å—Ç—Ä–µ—á–Ω—ã–º.",
    },
    {
        "name": "üî∏ 5. –ö—Ä—É–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ",
        "description": f"‚Ä¢	–ü—Ä–∏ –≤—ä–µ–∑–¥–µ —É—Å—Ç—É–ø–∏ —Ç–µ–º, –∫—Ç–æ —É–∂–µ –Ω–∞ –∫—Ä—É–≥–µ (–µ—Å–ª–∏ —Å—Ç–æ–∏—Ç –∑–Ω–∞–∫ ¬´–£—Å—Ç—É–ø–∏ –¥–æ—Ä–æ–≥—É¬ª).\n ‚Ä¢	–°–ª–µ–¥–∏ –∑–∞ –∑–Ω–∞–∫–∞–º–∏ ‚Äî –±—ã–≤–∞–µ—Ç, —á—Ç–æ –≥–ª–∞–≤–Ω–∞—è –¥–æ—Ä–æ–≥–∞ –∏–¥—ë—Ç –ø–æ –∫—Ä—É–≥—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∫—Ä—É–≥.",
    },
    {
        "name": "üî∏ 6. –ü—Ä–æ–µ–∑–¥ —Å —Ç—Ä–∞–º–≤–∞–µ–º",
        "description": f"‚Ä¢	–ù–∞ —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞—Ö —Ç—Ä–∞–º–≤–∞–π –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ.\n ‚Ä¢	–ù–∞ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã—Ö ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ —Å–∏–≥–Ω–∞–ª—É —Ç–æ–≥–æ –∂–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞, —á—Ç–æ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.",
    },

   
]


from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes
from theory import pages_main_rules

def get_crossroad_text(theory, index, total):
    return f"*{theory['name']}*\n\n{theory['description']}\n\n–¢–µ–æ—Ä–∏—è {index + 1} –∏–∑ {total}"

user_message_ids = {}


def get_crossroad_keyboard(index, total):
    buttons = []

    if index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"crossroad_{index - 1}"))

    if index < total - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"crossroad_{index + 1}"))

    if index == total - 1:
        buttons.append(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É", callback_data=f"start_test"))

    # –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
    buttons.append(InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_topics"))

    return InlineKeyboardMarkup([buttons])


async def show_crossroad(update, context: ContextTypes.DEFAULT_TYPE, index: int):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if index < 0 or index >= len(main_rules):
        await context.bot.send_message(chat_id, "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    theory = main_rules[index]
    text = get_crossroad_text(theory, index, len(main_rules))
    keyboard = get_crossroad_keyboard(index, len(main_rules))

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    if user_id in user_message_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=user_message_ids[user_id])
        except:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    sent = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    user_message_ids[user_id] = sent.message_id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫: "–î–∞–ª–µ–µ", "–ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"
async def handle_crossroad_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("crossroad_"):
        try:
            index = int(data.split("_")[1])
            await show_crossroad(update, context, index)
        except ValueError:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif data == "back_to_topics":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤ —Å–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏)
        from main import get_topics_keyboard
        chat_id = query.message.chat_id
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìö –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º:",
            reply_markup=get_topics_keyboard()
        )