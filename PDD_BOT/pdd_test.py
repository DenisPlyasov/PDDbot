import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, Update
from telegram.ext import ContextTypes


import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from telegram import Update

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
with open("PDD_BOT/tickets.json", "r", encoding="utf-8") as f:
    tickets_data = json.load(f)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
IMAGE_PATH = "PDD_BOT/pictures/test"

# –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ —É—Å–ª–æ–≤–∏—é ‚Äî –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ * –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞)
answers = ['2', '1', '1', '4', '2', '2', '4', '3', '1', '3', '1', '3', '3', '1', '3', '4', '3', '4', '3', '2', '2', '1', '1', '3', '3', '1', '3', '3', '1', '3', '3', '2', '3', '3', '1', '3', '2', '1', '3', '3', '1', '3', '3', '2', '2', '3', '2', '1', '3', '1', '3', '2', '2', '1', '3', '3', '4', '2', '3', '3', '2', '2', '1', '1', '2', '1', '1', '2', '2', '1', '1', '2', '3', '3', '2', '4', '1', '4', '1', '2', '1', '2', '1', '1', '3', '1', '3', '3', '2', '3', '1', '2', '2', '1', '1', '3', '2', '1', '2', '1', '3', '2', '3', '3', '2', '1', '1', '2', '3', '3', '1', '3', '3', '2', '2', '3', '3', '4', '1', '2', '1', '2', '1', '2', '2', '2', '1', '3', '2', '2', '1', '3', '2', '2', '3', '3', '3', '3', '2', '2', '2', '3', '3', '1', '1', '3', '1', '2', '3', '3', '2', '1', '1', '2', '2', '3', '2', '1', '1', '2', '2', '2', '1', '3', '1', '2', '2', '1', '3', '2', '3', '3', '2', '2', '3', '3', '4', '3', '2', '2', '2', '1', '3', '3', '2', '1', '1', '2', '1', '3', '2', '2', '3', '3', '3', '3', '2', '4', '3', '1', '2', '1', '3', '2', '3', '3', '1', '1', '2', '3', '3', '1', '1', '2', '1', '2', '3', '2', '3', '2', '2', '3', '2', '1', '2', '3', '2', '1', '3', '2', '2', '3', '2', '3', '3', '3', '2', '2', '1', '3', '3', '2', '3', '2', '3', '1', '1', '3', '2', '3', '3', '3', '1', '3', '2', '2', '1', '2', '3', '2', '1', '2', '2', '3', '2', '1', '1', '3', '1', '2', '1', '1', '3', '3', '2', '2', '1', '3', '1', '3', '4', '2', '3', '3', '4', '1', '1', '3', '1', '2', '3', '1', '3', '2', '1', '2', '4', '3', '2', '2', '4', '2', '2', '2', '3', '2', '3', '2', '3', '2', '1', '1', '2', '1', '3', '2', '3', '2', '1', '2', '1', '1', '2', '2', '3', '1', '2', '3', '2', '2', '3', '2', '1', '1', '2', '4', '3', '2', '3', '1', '1', '3', '1', '2', '2', '2', '3', '2', '2', '3', '3', '2', '3', '3', '2', '3', '2', '2', '3', '3', '2', '3', '1', '3', '2', '2', '3', '1', '1', '3', '3', '3', '2', '1', '3', '1', '2', '3', '1', '3', '4', '1', '3', '2', '2', '3', '1', '3', '2', '2', '3', '1', '3', '2', '3', '1', '2', '1', '2', '2', '2', '3', '1', '3', '3', '3', '1', '3', '2', '3', '2', '3', '3', '3', '2', '4', '3', '2', '1', '2', '1', '2', '2', '3', '2', '3', '1', '2', '3', '4', '2', '1', '1', '3', '2', '3', '2', '2', '3', '1', '2', '1', '2', '2', '3', '2', '1', '1', '3', '3', '3', '3', '2', '2', '2', '1', '3', '2', '3', '3', '3', '2', '1', '2', '2', '2', '2', '3', '2', '3', '3', '2', '1', '3', '3', '2', '1', '2', '2', '3', '1', '3', '1', '2', '4', '2', '1', '2', '3', '3', '3', '3', '1', '3', '2', '3', '2', '4', '3', '1', '3', '2', '2', '1', '2', '2', '1', '2', '3', '2', '3', '2', '2', '3', '2', '2', '1', '3', '2', '2', '2', '1', '1', '3', '3', '3', '2', '1', '1', '2', '2', '3', '3', '2', '2', '2', '2', '3', '1', '3', '1', '1', '3', '3', '1', '3', '3', '2', '1', '2', '1', '3', '3', '1', '1', '1', '2', '2', '4', '4', '3', '2', '1', '3', '1', '2', '1', '1', '2', '3', '3', '4', '3', '1', '3', '2', '4', '3', '2', '3', '1', '2', '2', '2', '3', '2', '3', '1', '3', '2', '3', '3', '3', '2', '4', '3', '1', '3', '1', '2', '4', '1', '1', '2', '4', '2', '1', '1', '3', '2', '1', '1', '1', '2', '4', '3', '2', '3', '3', '2', '2', '2', '1', '4', '3', '3', '1', '3', '4', '4', '3', '1', '3', '2', '3', '3', '2', '3', '1', '1', '2', '1', '3', '2', '3', '1', '3', '1', '4', '4', '3', '3', '4', '2', '3', '1', '2', '3', '2', '3', '3', '2', '2', '2', '1', '3', '1', '2', '3', '2', '3', '3', '1', '2', '1', '2', '3', '3', '2', '3', '3', '3', '2', '3', '1', '2', '3', '2', '3', '1', '2', '3', '3', '2', '2', '1', '1', '3', '3', '2', '1', '2', '1', '3', '3', '2', '1', '3', '1', '3', '2', '2', '3', '3', '2', '3', '3', '2', '3', '1', '2', '3', '2', '3', '1', '1', '3', '1', '3', '3', '1', '3', '2', '3', '2', '3', '3', '2', '3', '2', '2', '2', '2', '3', '1', '3', '2', '4', '2', '1', '2', '2', '3', '3', '2', '1', '3', '3', '2', '2', '3', '2', '2', '4', '3', '3', '3', '1', '2', '3', '1', '3', '3', '1', '2', '2', '2', '3', '2', '1', '1', '1', '3', '1', '2', '3', '1', '3', '1', '3', '1', '1', '4', '2', '3', '3', '1', '4', '1', '3']


# --- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ ---
async def send_exam_ranges(message):
    keyboard = [
        [
            InlineKeyboardButton("1-10", callback_data="exam_range_1_10"),
            InlineKeyboardButton("11-20", callback_data="exam_range_11_20"),
        ],
        [
            InlineKeyboardButton("21-30", callback_data="exam_range_21_30"),
            InlineKeyboardButton("31-40", callback_data="exam_range_31_40"),
        ],
    ]
    await message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –±–∏–ª–µ—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é —ç–∫–∑–∞–º–µ–Ω–∞ ---
async def start_exam_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –∏–∑ /start –∏–ª–∏ "–≤ –º–µ–Ω—é"
    if update.message:
        await send_exam_ranges(update.message)
    # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –∏–∑ callback_query
    elif update.callback_query:
        await send_exam_ranges(update.callback_query.message)


# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∏–ª–µ—Ç—ã" ---
async def exam_all_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await send_exam_ranges(query.message)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ----------
async def select_ticket_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, _, start, end = query.data.split("_")
    start, end = int(start), int(end)

    keyboard = []
    row = []
    for i in range(start, end + 1):
        row.append(InlineKeyboardButton(str(i), callback_data=f"exam_ticket_{i}"))
        if len(row) == 5:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    await query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç {start}-{end}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –£—Ç–∏–ª–∏—Ç–∞: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ø. –≤–æ–ø—Ä–æ—Å–æ–≤/–æ—à–∏–±–æ–∫ ---
def _reset_extra_state(context):
    context.user_data.pop("exam_extra_limit", None)
    context.user_data["exam_errors"] = []


# ---------- –í—ã–±–æ—Ä –±–∏–ª–µ—Ç–∞ ----------
async def select_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    ticket_number = int(query.data.split("_")[2])

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞
    _reset_extra_state(context)

    context.user_data["exam_ticket"] = ticket_number
    context.user_data["exam_question_index"] = 0

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω", callback_data="start_exam"),
            InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="exam_to_menu")
        ]
    ]

    await query.message.edit_text(
        "–ù–∞ —Ä–µ—à–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ —É –≤–∞—Å –µ—Å—Ç—å 20 –º–∏–Ω—É—Ç.\n"
        "–ó–∞ –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É –¥–æ–±–∞–≤–ª—è–µ–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ 5 –º–∏–Ω—É—Ç.\n"
        "–ú–∞–∫—Å–∏–º—É–º 2 –æ—à–∏–±–∫–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ---------- –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞ ----------
async def start_exam_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    ticket_number = context.user_data.get("exam_ticket")

    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —ç–∫–∑–∞–º–µ–Ω–∞ —Ç–æ–∂–µ —á–∏—Å—Ç–∏–º —Ö–≤–æ—Å—Ç—ã
    _reset_extra_state(context)
    context.user_data["exam_question_index"] = 0

    if ticket_number is None:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    await send_exam_question(query.message.chat_id, ticket_number, 0, context)


import random

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ----------
async def handle_exam_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    ticket_number = context.user_data.get("exam_ticket")
    question_index = context.user_data.get("exam_question_index", 0) 
    errors = context.user_data.get("exam_errors", [])

    correct_answer = answers[((ticket_number - 1) * 20) + question_index]
    user_answer = query.data.split("_")[2]

    if user_answer == correct_answer:
        context.user_data["exam_question_index"] += 1

        # ‚úÖ –î–æ–ø. —Ä–µ–∂–∏–º (5 –∏–ª–∏ 10 –≤–æ–ø—Ä–æ—Å–æ–≤)
        if "exam_extra_limit" in context.user_data:
            if context.user_data["exam_question_index"] >= context.user_data["exam_extra_limit"]:
                # –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ä–µ—à–∞–Ω—ã –≤—Å–µ –¥–æ–ø. –≤–æ–ø—Ä–æ—Å—ã ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                _reset_extra_state(context)
                keyboard = [
                    [InlineKeyboardButton("üé´ –ë–∏–ª–µ—Ç—ã", callback_data="start_exam")],
                    [InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="exam_to_menu")]
                ]
                await query.message.reply_text(
                    "‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n–•–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–æ–π –±–∏–ª–µ—Ç?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return

        await send_exam_question(query.message.chat_id, ticket_number, context.user_data["exam_question_index"], context)

    else:
        errors.append((question_index + 1, correct_answer))
        context.user_data["exam_errors"] = errors

        # üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—à–∏–±–∫–∞–º
        if len(errors) >= 3:
            _reset_extra_state(context)
            keyboard = [
                [InlineKeyboardButton("üé´ –ë–∏–ª–µ—Ç—ã", callback_data="exam_all_ranges")],
                [InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="exam_to_menu")]
            ]
            await query.message.reply_text(
                f"–û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.\n\nüö´ –õ–∏–º–∏—Ç –æ—à–∏–±–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω (3 –æ—à–∏–±–∫–∏). –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        # ‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–ø. –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí —Å—Ä–∞–∑—É –∫–æ–Ω–µ—Ü
        if "exam_extra_limit" in context.user_data:
            _reset_extra_state(context)
            await query.message.reply_text("üö´ –û—à–∏–±–∫–∞ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        context.user_data["exam_question_index"] += 1
        await send_exam_question(query.message.chat_id, ticket_number, context.user_data["exam_question_index"], context)



# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ----------
async def send_exam_question(chat_id, ticket_number, question_index, context: ContextTypes.DEFAULT_TYPE):
    ticket_number = int(ticket_number)
    ticket = next(t for t in tickets_data if t["ticket_number"] == ticket_number)

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω—ã
    if question_index >= len(ticket["questions"]):
        errors = context.user_data.get("exam_errors", [])

        if len(errors) == 0:
            # ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫
            keyboard = [
                [InlineKeyboardButton("üé´ –ë–∏–ª–µ—Ç—ã", callback_data="exam_all_ranges")],
                [InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="exam_to_menu")]
            ]
            await context.bot.send_message(
                chat_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!\n–•–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–æ–π –±–∏–ª–µ—Ç?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        elif len(errors) in [1, 2]:
            # ‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ ‚Üí –¥–∞—ë–º –¥–æ–ø. –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
            extra_questions = 5 if len(errors) == 1 else 10

            # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∏–ª–µ—Ç, –Ω–µ —Ä–∞–≤–Ω—ã–π —Ç–µ–∫—É—â–µ–º—É
            possible_tickets = [t["ticket_number"] for t in tickets_data if t["ticket_number"] != ticket_number]
            next_ticket_number = random.choice(possible_tickets)

            await context.bot.send_message(
                chat_id,
                f"‚ùå –í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ {len(errors)} –æ—à–∏–±–∫—É(–∏).\n"
                f"–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {extra_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ ‚Ññ{next_ticket_number}."
            )
            context.user_data["exam_ticket"] = next_ticket_number
            context.user_data["exam_question_index"] = 0
            context.user_data["exam_extra_limit"] = extra_questions
            await send_exam_question(chat_id, next_ticket_number, 0, context)
            return

    # –ë–µ—Ä—ë–º –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É
    question = ticket["questions"][question_index]
    text = f"–ë–∏–ª–µ—Ç {ticket_number}, –í–æ–ø—Ä–æ—Å {question['question_number']}:\n\n{question['text']}\n\n"
    for idx, ans in enumerate(question["answers"], 1):
        text += f"{idx}. {ans}\n"

    img_path = os.path.join(IMAGE_PATH, f"p{ticket_number}.{question['question_number']}.png")

    keyboard = [[
        InlineKeyboardButton(str(i + 1), callback_data=f"exam_answer_{i+1}")
        for i in range(len(question["answers"]))
    ]]
    keyboard.append([InlineKeyboardButton("üìã –í –º–µ–Ω—é", callback_data="exam_to_menu")])

    if os.path.exists(img_path):
        with open(img_path, "rb") as img:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=img,
                caption=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def exam_all_ranges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await send_exam_ranges(query.message)


async def exam_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ß–∏—Å—Ç–∏–º —Ö–≤–æ—Å—Ç—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    _reset_extra_state(context)
    context.user_data.pop("exam_ticket", None)
    context.user_data.pop("exam_question_index", None)

    from main import get_topics_keyboard
    chat_id = query.message.chat_id
    await context.bot.send_message(
        chat_id=chat_id,
        text="üìö –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º:",
        reply_markup=get_topics_keyboard()
    )

