from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes
import os
import random


main_lights = [
    {
        "name": "üî∏ 1. –ù–µ–º–Ω–æ–≥–æ —Ç–µ–æ—Ä–∏–∏",
        "description": f"–°–≤–µ—Ç–æ—Ñ–æ—Ä —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Å–∏–≥–Ω–∞–ª–æ–≤:\n‚Ä¢	–ó–µ–ª—ë–Ω—ã–π ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.\n‚Ä¢	–ñ—ë–ª—Ç—ã–π ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –Ω–æ –µ—Å–ª–∏ –Ω–∞—á–∞–ª –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫ ‚Äî –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞–Ω—ë–≤—Ä.\n‚Ä¢	–ö—Ä–∞—Å–Ω—ã–π ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n‚Ä¢	–ó–µ–ª—ë–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞ –¥–æ–ø. —Å–µ–∫—Ü–∏–∏ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ.\n‚Ä¢	–ú–∏–≥–∞—é—â–∏–π –∂—ë–ª—Ç—ã–π ‚Äî –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫ –Ω–µ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–π, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.",
    },
    {
        "name": "üî∏ 2. –°—Ç—Ä–µ–ª–∫–∏ –≤ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–µ",
        "description": f"	‚Ä¢	–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è.\n‚Ä¢	–ü—Ä–∏ –≥–æ—Ä—è—â–µ–π —Å—Ç—Ä–µ–ª–∫–µ –º–æ–∂–Ω–æ –µ—Ö–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.",
    },
    {
        "name": "üî∏ 3. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞:",
        "description": f"	‚Ä¢	–†—É–∫–∏ –≤—ã—Ç—è–Ω—É—Ç—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã –∏–ª–∏ –æ–ø—É—â–µ–Ω—ã –≤–Ω–∏–∑ ‚Äî –µ—Ö–∞—Ç—å –Ω–µ–ª—å–∑—è, –ø–æ–ø–µ—Ä–µ—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.\n‚Ä¢	–†—É–∫–∞ –≤—ã—Ç—è–Ω—É—Ç–∞ –≤–ø–µ—Ä—ë–¥ ‚Äî —Å–æ —Å–ø–∏–Ω—ã –∏ –≥—Ä—É–¥–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä—è–º–æ –∏ –Ω–∞–ø—Ä–∞–≤–æ.\n‚Ä¢	–ö—Ä—É–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ä—É–∫–æ–π ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —É—Å–∫–æ—Ä–∏—Ç—å –≤—ã–µ–∑–¥ —Å –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞.\n–ó–∞–ø–æ–º–Ω–∏:\n\n–ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫ ‚Äî –≤—ã–ø–æ–ª–Ω—è–π —Ç–æ–ª—å–∫–æ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–µ.",
    },
]


from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes

def get_lights_text(theory, index, total):
    return f"*{theory['name']}*\n\n{theory['description']}\n\n–¢–µ–æ—Ä–∏—è {index + 1} –∏–∑ {total}"

user_message_ids = {}


def get_lights_keyboard(index, total):
    buttons = []

    if index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"lights_{index - 1}"))

    if index < total - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"lights_{index + 1}"))

    if index == total - 1:
        buttons.append(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É", callback_data=f"start_test"))

    # –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
    buttons.append(InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_topics"))

    return InlineKeyboardMarkup([buttons])


async def show_lights(update, context: ContextTypes.DEFAULT_TYPE, index: int):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if index < 0 or index >= len(main_lights):
        await context.bot.send_message(chat_id, "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    theory = main_lights[index]
    text = get_lights_text(theory, index, len(main_lights))
    keyboard = get_lights_keyboard(index, len(main_lights))

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    if user_id in user_message_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=user_message_ids[user_id])
        except:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    sent = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    user_message_ids[user_id] = sent.message_id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫: "–î–∞–ª–µ–µ", "–ù–∞–∑–∞–¥", "–í –º–µ–Ω—é"
async def handle_lights_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("lights_"):
        try:
            index = int(data.split("_")[1])
            await show_lights(update, context, index)
        except ValueError:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif data == "back_to_topics":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤ —Å–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏)
        from main import get_topics_keyboard
        chat_id = query.message.chat_id
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìö –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º:",
            reply_markup=get_topics_keyboard()
        )